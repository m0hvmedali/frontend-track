{
  "javascript_commands": [
    {
      "name": "var",
      "type": "Variable Declaration",
      "description": "يعلن عن متغير بنطاق دالة أو نطاق عام.",
      "syntax": "var variableName = value;",
      "example": "var name = \"أحمد\";\nvar age = 25;\nvar isStudent = true;\n\nfunction example() {\n    var localVar = \"متغير محلي\";\n    console.log(localVar); // يعمل\n}\n\nconsole.log(name); // \"أحمد\"\nconsole.log(age); // 25\n// console.log(localVar); // خطأ - غير معرف خارج الدالة",
      "explanation": "var له نطاق دالة ويمكن إعادة تعريفه. يُفضل استخدام let أو const في الكود الحديث."
    },
    {
      "name": "let",
      "type": "Variable Declaration",
      "description": "يعلن عن متغير بنطاق كتلة (block scope).",
      "syntax": "let variableName = value;",
      "example": "let userName = \"فاطمة\";\nlet counter = 0;\n\nif (true) {\n    let blockScoped = \"متغير في الكتلة\";\n    console.log(blockScoped); // يعمل\n}\n\n// console.log(blockScoped); // خطأ - غير معرف خارج الكتلة\n\nfor (let i = 0; i < 3; i++) {\n    console.log(i); // 0, 1, 2\n}\n// console.log(i); // خطأ - i غير معرف خارج الحلقة",
      "explanation": "let له نطاق كتلة ولا يمكن إعادة تعريفه في نفس النطاق. الخيار المفضل للمتغيرات القابلة للتغيير."
    },
    {
      "name": "const",
      "type": "Variable Declaration",
      "description": "يعلن عن ثابت لا يمكن تغيير قيمته بعد التعريف.",
      "syntax": "const constantName = value;",
      "example": "const PI = 3.14159;\nconst siteName = \"موقع الأخبار\";\nconst colors = [\"أحمر\", \"أخضر\", \"أزرق\"];\n\n// PI = 3.14; // خطأ - لا يمكن تغيير قيمة const\n\n// لكن يمكن تعديل محتويات الكائنات والمصفوفات\ncolors.push(\"أصفر\"); // يعمل\nconsole.log(colors); // [\"أحمر\", \"أخضر\", \"أزرق\", \"أصفر\"]\n\nconst person = { name: \"علي\", age: 30 };\nperson.age = 31; // يعمل\nconsole.log(person); // { name: \"علي\", age: 31 }",
      "explanation": "const يمنع إعادة التعيين لكن لا يمنع تعديل محتويات الكائنات والمصفوفات."
    },
    {
      "name": "function",
      "type": "Function Declaration",
      "description": "يعرف دالة يمكن استدعاؤها لاحقاً.",
      "syntax": "function functionName(parameters) { return value; }",
      "example": "// دالة بسيطة\nfunction greet(name) {\n    return \"مرحباً \" + name;\n}\n\n// دالة بمعاملات متعددة\nfunction calculateArea(width, height) {\n    return width * height;\n}\n\n// دالة بقيمة افتراضية\nfunction createMessage(text, type = \"info\") {\n    return `[${type.toUpperCase()}] ${text}`;\n}\n\n// استدعاء الدوال\nconsole.log(greet(\"أحمد\")); // \"مرحباً أحمد\"\nconsole.log(calculateArea(5, 3)); // 15\nconsole.log(createMessage(\"رسالة تجريبية\")); // \"[INFO] رسالة تجريبية\"\nconsole.log(createMessage(\"خطأ!\", \"error\")); // \"[ERROR] خطأ!\"",
      "explanation": "الدوال هي كتل من الكود قابلة لإعادة الاستخدام. يمكن أن تأخذ معاملات وترجع قيماً."
    },
    {
      "name": "if...else",
      "type": "Conditional Statement",
      "description": "ينفذ كود مختلف بناءً على شرط معين.",
      "syntax": "if (condition) { ... } else { ... }",
      "example": "let score = 85;\n\nif (score >= 90) {\n    console.log(\"ممتاز\");\n} else if (score >= 80) {\n    console.log(\"جيد جداً\");\n} else if (score >= 70) {\n    console.log(\"جيد\");\n} else if (score >= 60) {\n    console.log(\"مقبول\");\n} else {\n    console.log(\"راسب\");\n}\n\n// شرط مع عدة متغيرات\nlet age = 20;\nlet hasLicense = true;\n\nif (age >= 18 && hasLicense) {\n    console.log(\"يمكنك القيادة\");\n} else {\n    console.log(\"لا يمكنك القيادة\");\n}",
      "explanation": "يستخدم للتحكم في تدفق البرنامج بناءً على الشروط المنطقية."
    },
    {
      "name": "for",
      "type": "Loop",
      "description": "ينفذ كود متكرر لعدد محدد من المرات.",
      "syntax": "for (initialization; condition; increment) { ... }",
      "example": "// حلقة بسيطة\nfor (let i = 0; i < 5; i++) {\n    console.log(\"العدد: \" + i);\n}\n\n// التكرار عبر مصفوفة\nconst fruits = [\"تفاح\", \"برتقال\", \"موز\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(`الفاكهة رقم ${i + 1}: ${fruits[i]}`);\n}\n\n// حلقة for...of للمصفوفات\nfor (const fruit of fruits) {\n    console.log(\"فاكهة: \" + fruit);\n}\n\n// حلقة for...in للكائنات\nconst person = { name: \"سارة\", age: 28, city: \"الرياض\" };\nfor (const key in person) {\n    console.log(`${key}: ${person[key]}`);\n}",
      "explanation": "for تستخدم عندما تعرف عدد التكرارات مسبقاً. for...of للمصفوفات، for...in للكائنات."
    },
    {
      "name": "while",
      "type": "Loop",
      "description": "ينفذ كود متكرر طالما أن الشرط صحيح.",
      "syntax": "while (condition) { ... }",
      "example": "// حلقة while بسيطة\nlet count = 0;\nwhile (count < 3) {\n    console.log(\"العدد: \" + count);\n    count++;\n}\n\n// قراءة بيانات من مصفوفة\nconst numbers = [1, 2, 3, 4, 5];\nlet index = 0;\nwhile (index < numbers.length) {\n    console.log(\"الرقم: \" + numbers[index]);\n    index++;\n}\n\n// do...while - ينفذ مرة واحدة على الأقل\nlet userInput;\ndo {\n    userInput = prompt(\"أدخل كلمة المرور:\");\n} while (userInput !== \"123456\");\nconsole.log(\"تم تسجيل الدخول بنجاح!\");",
      "explanation": "while تستخدم عندما لا تعرف عدد التكرارات مسبقاً. do...while ينفذ الكود مرة واحدة على الأقل."
    },
    {
      "name": "Array",
      "type": "Data Structure",
      "description": "مجموعة مرتبة من العناصر يمكن الوصول إليها بالفهرس.",
      "syntax": "const array = [element1, element2, ...];",
      "example": "// إنشاء مصفوفة\nconst colors = [\"أحمر\", \"أخضر\", \"أزرق\"];\nconst numbers = [1, 2, 3, 4, 5];\nconst mixed = [\"نص\", 42, true, null];\n\n// الوصول للعناصر\nconsole.log(colors[0]); // \"أحمر\"\nconsole.log(numbers.length); // 5\n\n// إضافة عناصر\ncolors.push(\"أصفر\"); // إضافة في النهاية\ncolors.unshift(\"أسود\"); // إضافة في البداية\n\n// حذف عناصر\nconst lastColor = colors.pop(); // حذف من النهاية\nconst firstColor = colors.shift(); // حذف من البداية\n\n// البحث\nconst index = colors.indexOf(\"أخضر\");\nconst exists = colors.includes(\"أزرق\");\n\nconsole.log(colors); // المصفوفة المحدثة",
      "explanation": "المصفوفات تخزن عدة قيم في متغير واحد ولها فهارس تبدأ من 0."
    },
    {
      "name": "Object",
      "type": "Data Structure",
      "description": "مجموعة من أزواج المفتاح-القيمة (key-value pairs).",
      "syntax": "const object = { key1: value1, key2: value2 };",
      "example": "// إنشاء كائن\nconst student = {\n    name: \"محمد\",\n    age: 22,\n    grades: [85, 90, 78],\n    isActive: true,\n    address: {\n        city: \"جدة\",\n        street: \"شارع الملك فهد\"\n    }\n};\n\n// الوصول للخصائص\nconsole.log(student.name); // \"محمد\"\nconsole.log(student[\"age\"]); // 22\nconsole.log(student.address.city); // \"جدة\"\n\n// تعديل الخصائص\nstudent.age = 23;\nstudent.email = \"mohammed@example.com\";\n\n// حذف خصائص\ndelete student.isActive;\n\n// التكرار عبر الخصائص\nfor (const key in student) {\n    console.log(`${key}: ${student[key]}`);\n}",
      "explanation": "الكائنات تخزن البيانات في شكل خصائص ويمكن الوصول إليها بالاسم."
    },
    {
      "name": "addEventListener",
      "type": "DOM Method",
      "description": "يضيف مستمع حدث لعنصر HTML.",
      "syntax": "element.addEventListener('event', function);",
      "example": "// إضافة مستمع لزر\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n    alert('تم النقر على الزر!');\n});\n\n// مستمع بدالة منفصلة\nfunction handleClick(event) {\n    console.log('تم النقر على:', event.target.textContent);\n    event.target.style.backgroundColor = 'lightblue';\n}\n\nbutton.addEventListener('click', handleClick);\n\n// مستمعات متعددة\nconst input = document.getElementById('textInput');\ninput.addEventListener('focus', function() {\n    this.style.borderColor = 'blue';\n});\n\ninput.addEventListener('blur', function() {\n    this.style.borderColor = 'gray';\n});\n\ninput.addEventListener('input', function() {\n    console.log('القيمة الحالية:', this.value);\n});",
      "explanation": "يسمح بالاستجابة لأحداث المستخدم مثل النقر، الكتابة، التمرير، إلخ."
    },
    {
      "name": "document.getElementById",
      "type": "DOM Method",
      "description": "يحصل على عنصر HTML بواسطة معرفه (ID).",
      "syntax": "document.getElementById('elementId');",
      "example": "// HTML: <div id=\"content\">محتوى</div>\n\n// الحصول على العنصر\nconst contentDiv = document.getElementById('content');\n\n// تعديل المحتوى\ncontentDiv.textContent = 'محتوى جديد';\ncontentDiv.innerHTML = '<strong>محتوى مميز</strong>';\n\n// تعديل الأنماط\ncontentDiv.style.color = 'red';\ncontentDiv.style.fontSize = '20px';\ncontentDiv.style.backgroundColor = 'yellow';\n\n// إضافة أو إزالة فئات CSS\ncontentDiv.classList.add('highlight');\ncontentDiv.classList.remove('old-style');\ncontentDiv.classList.toggle('active');\n\n// التحقق من وجود العنصر\nif (contentDiv) {\n    console.log('تم العثور على العنصر');\n} else {\n    console.log('العنصر غير موجود');\n}",
      "explanation": "الطريقة الأساسية للوصول لعناصر HTML وتعديلها باستخدام JavaScript."
    },
    {
      "name": "document.querySelector",
      "type": "DOM Method",
      "description": "يحصل على أول عنصر يطابق محدد CSS المعطى.",
      "syntax": "document.querySelector('selector');",
      "example": "// اختيار بالمعرف\nconst header = document.querySelector('#header');\n\n// اختيار بالفئة\nconst firstButton = document.querySelector('.btn');\n\n// اختيار بنوع العنصر\nconst firstParagraph = document.querySelector('p');\n\n// اختيار معقد\nconst navLink = document.querySelector('nav ul li a');\nconst activeButton = document.querySelector('button.active');\nconst emailInput = document.querySelector('input[type=\"email\"]');\n\n// تعديل العناصر المختارة\nif (header) {\n    header.textContent = 'عنوان جديد';\n}\n\nif (firstButton) {\n    firstButton.addEventListener('click', function() {\n        console.log('تم النقر على الزر الأول');\n    });\n}\n\n// اختيار جميع العناصر المطابقة\nconst allButtons = document.querySelectorAll('.btn');\nallButtons.forEach(function(button, index) {\n    button.textContent = `زر رقم ${index + 1}`;\n});",
      "explanation": "أكثر مرونة من getElementById لأنه يدعم جميع محددات CSS."
    },
    {
      "name": "console.log",
      "type": "Debug Method",
      "description": "يطبع رسائل في وحدة تحكم المتصفح للتصحيح.",
      "syntax": "console.log(message);",
      "example": "// طباعة نصوص\nconsole.log('مرحباً بالعالم!');\nconsole.log('اسم المستخدم:', 'أحمد');\n\n// طباعة متغيرات\nconst age = 25;\nconst name = 'فاطمة';\nconsole.log('العمر:', age);\nconsole.log('الاسم والعمر:', name, age);\n\n// طباعة كائنات ومصفوفات\nconst user = { name: 'علي', email: 'ali@example.com' };\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log('بيانات المستخدم:', user);\nconsole.log('الأرقام:', numbers);\n\n// أنواع أخرى من console\nconsole.warn('تحذير: هذا تحذير');\nconsole.error('خطأ: حدث خطأ');\nconsole.info('معلومة: هذه معلومة');\nconsole.table(user); // عرض الكائن في جدول",
      "explanation": "أداة أساسية لتصحيح الأخطاء ومراقبة قيم المتغيرات أثناء تطوير البرنامج."
    },
    {
      "name": "setTimeout",
      "type": "Timer Function",
      "description": "ينفذ دالة بعد فترة زمنية محددة (بالميلي ثانية).",
      "syntax": "setTimeout(function, delay);",
      "example": "// تنفيذ بعد 3 ثوان\nsetTimeout(function() {\n    console.log('مرت 3 ثوان!');\n}, 3000);\n\n// تنفيذ مع معاملات\nfunction showMessage(name, message) {\n    console.log(`${name}: ${message}`);\n}\n\nsetTimeout(showMessage, 2000, 'أحمد', 'مرحباً!');\n\n// حفظ معرف المؤقت لإلغائه لاحقاً\nconst timerId = setTimeout(function() {\n    console.log('هذا لن يظهر');\n}, 5000);\n\n// إلغاء المؤقت\nclearTimeout(timerId);\n\n// مثال عملي: إخفاء رسالة بعد 5 ثوان\nfunction showNotification(message) {\n    const notification = document.createElement('div');\n    notification.textContent = message;\n    notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: green; color: white; padding: 10px;';\n    document.body.appendChild(notification);\n    \n    setTimeout(function() {\n        document.body.removeChild(notification);\n    }, 5000);\n}",
      "explanation": "مفيد لتأخير تنفيذ الكود، إنشاء رسوم متحركة، أو إخفاء العناصر تلقائياً."
    },
    {
      "name": "setInterval",
      "type": "Timer Function",
      "description": "ينفذ دالة بشكل متكرر كل فترة زمنية محددة.",
      "syntax": "setInterval(function, interval);",
      "example": "// عداد كل ثانية\nlet counter = 0;\nconst intervalId = setInterval(function() {\n    counter++;\n    console.log('العداد:', counter);\n    \n    // إيقاف العداد عند الوصول لـ 10\n    if (counter >= 10) {\n        clearInterval(intervalId);\n        console.log('تم إيقاف العداد');\n    }\n}, 1000);\n\n// ساعة رقمية\nfunction updateClock() {\n    const now = new Date();\n    const timeString = now.toLocaleTimeString('ar-SA');\n    const clockElement = document.getElementById('clock');\n    if (clockElement) {\n        clockElement.textContent = timeString;\n    }\n}\n\n// تحديث الساعة كل ثانية\nsetInterval(updateClock, 1000);\nupdateClock(); // تشغيل فوري\n\n// مثال: تحديث البيانات من الخادم كل 30 ثانية\nsetInterval(function() {\n    // fetch('/api/data')\n    //     .then(response => response.json())\n    //     .then(data => updateUI(data));\n    console.log('تحديث البيانات...');\n}, 30000);",
      "explanation": "مفيد للساعات، العدادات، تحديث البيانات الدورية، أو أي مهمة تحتاج تكرار منتظم."
    },
    {
      "name": "fetch",
      "type": "Network Function",
      "description": "يرسل طلبات HTTP ويحصل على البيانات من الخوادم (API).",
      "syntax": "fetch(url).then(response => response.json()).then(data => ...);",
      "example": "// طلب GET بسيط\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    .then(data => {\n        console.log('البيانات المستلمة:', data);\n        document.getElementById('title').textContent = data.title;\n    })\n    .catch(error => {\n        console.error('خطأ في الطلب:', error);\n    });\n\n// طلب POST لإرسال بيانات\nconst newPost = {\n    title: 'منشور جديد',\n    body: 'محتوى المنشور',\n    userId: 1\n};\n\nfetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPost)\n})\n.then(response => response.json())\n.then(data => {\n    console.log('تم إنشاء المنشور:', data);\n})\n.catch(error => {\n    console.error('خطأ في الإرسال:', error);\n});\n\n// استخدام async/await (أسلوب حديث)\nasync function getData() {\n    try {\n        const response = await fetch('/api/users');\n        const users = await response.json();\n        displayUsers(users);\n    } catch (error) {\n        console.error('خطأ:', error);\n    }\n}",
      "explanation": "الطريقة الحديثة للتواصل مع الخوادم وجلب البيانات دون إعادة تحميل الصفحة."
    },
    {
      "name": "JSON.parse",
      "type": "JSON Method",
      "description": "يحول نص JSON إلى كائن JavaScript.",
      "syntax": "JSON.parse(jsonString);",
      "example": "// تحويل نص JSON إلى كائن\nconst jsonString = '{\"name\":\"أحمد\",\"age\":30,\"city\":\"الرياض\"}';\nconst user = JSON.parse(jsonString);\nconsole.log(user.name); // \"أحمد\"\nconsole.log(user.age); // 30\n\n// مع مصفوفة\nconst jsonArray = '[{\"id\":1,\"name\":\"محمد\"},{\"id\":2,\"name\":\"فاطمة\"}]';\nconst users = JSON.parse(jsonArray);\nconsole.log(users[0].name); // \"محمد\"\n\n// التعامل مع الأخطاء\nfunction safeJsonParse(jsonString) {\n    try {\n        return JSON.parse(jsonString);\n    } catch (error) {\n        console.error('خطأ في تحليل JSON:', error);\n        return null;\n    }\n}\n\nconst invalidJson = '{name: \"أحمد\"}';\nconst result = safeJsonParse(invalidJson); // null\n\n// استخدام مع localStorage\nconst savedData = localStorage.getItem('userData');\nif (savedData) {\n    const userData = JSON.parse(savedData);\n    console.log('البيانات المحفوظة:', userData);\n}",
      "explanation": "ضروري للتعامل مع البيانات المستلمة من APIs أو المحفوظة في localStorage."
    },
    {
      "name": "JSON.stringify",
      "type": "JSON Method",
      "description": "يحول كائن JavaScript إلى نص JSON.",
      "syntax": "JSON.stringify(object);",
      "example": "// تحويل كائن إلى JSON\nconst user = {\n    name: \"سارة\",\n    age: 28,\n    hobbies: [\"قراءة\", \"سباحة\", \"طبخ\"],\n    address: {\n        city: \"جدة\",\n        country: \"السعودية\"\n    }\n};\n\nconst jsonString = JSON.stringify(user);\nconsole.log(jsonString);\n// '{\"name\":\"سارة\",\"age\":28,\"hobbies\":[\"قراءة\",\"سباحة\",\"طبخ\"],\"address\":{\"city\":\"جدة\",\"country\":\"السعودية\"}}'\n\n// تنسيق جميل للقراءة\nconst prettyJson = JSON.stringify(user, null, 2);\nconsole.log(prettyJson);\n\n// حفظ في localStorage\nlocalStorage.setItem('userData', JSON.stringify(user));\n\n// إرسال إلى الخادم\nfetch('/api/users', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n});",
      "explanation": "ضروري لإرسال البيانات إلى APIs أو حفظها في localStorage."
    },
    {
      "name": "localStorage",
      "type": "Storage API",
      "description": "يحفظ البيانات في متصفح المستخدم بشكل دائم.",
      "syntax": "localStorage.setItem(key, value);",
      "example": "// حفظ البيانات\nlocalStorage.setItem('username', 'أحمد');\nlocalStorage.setItem('theme', 'dark');\n\n// حفظ كائن (يجب تحويله لـ JSON أولاً)\nconst settings = {\n    language: 'ar',\n    notifications: true,\n    fontSize: 16\n};\nlocalStorage.setItem('settings', JSON.stringify(settings));\n\n// قراءة البيانات\nconst username = localStorage.getItem('username');\nconsole.log('اسم المستخدم:', username); // \"أحمد\"\n\n// قراءة كائن\nconst savedSettings = localStorage.getItem('settings');\nif (savedSettings) {\n    const settings = JSON.parse(savedSettings);\n    console.log('اللغة:', settings.language); // \"ar\"\n}\n\n// حذف عنصر واحد\nlocalStorage.removeItem('theme');\n\n// حذف جميع البيانات\n// localStorage.clear();\n\n// التحقق من وجود مفتاح\nif (localStorage.getItem('username')) {\n    console.log('المستخدم مسجل دخول');\n}\n\n// عدد العناصر المحفوظة\nconsole.log('عدد العناصر:', localStorage.length);",
      "explanation": "مفيد لحفظ تفضيلات المستخدم، بيانات النماذج، أو أي بيانات تريد الاحتفاظ بها بين الجلسات."
    },
    {
      "name": "Math",
      "type": "Built-in Object",
      "description": "كائن يحتوي على خصائص ودوال رياضية.",
      "syntax": "Math.methodName()",
      "example": "// الثوابت الرياضية\nconsole.log(Math.PI); // 3.141592653589793\nconsole.log(Math.E); // 2.718281828459045\n\n// دوال أساسية\nconsole.log(Math.abs(-5)); // 5 (القيمة المطلقة)\nconsole.log(Math.round(4.7)); // 5 (التقريب)\nconsole.log(Math.floor(4.9)); // 4 (التقريب لأسفل)\nconsole.log(Math.ceil(4.1)); // 5 (التقريب لأعلى)\n\n// القوى والجذور\nconsole.log(Math.pow(2, 3)); // 8 (2 أس 3)\nconsole.log(Math.sqrt(16)); // 4 (الجذر التربيعي)\nconsole.log(Math.cbrt(27)); // 3 (الجذر التكعيبي)\n\n// الحد الأدنى والأقصى\nconsole.log(Math.min(5, 3, 9, 1)); // 1\nconsole.log(Math.max(5, 3, 9, 1)); // 9\n\n// الأرقام العشوائية\nconsole.log(Math.random()); // رقم عشوائي بين 0 و 1\n\n// رقم عشوائي بين 1 و 10\nconst randomNum = Math.floor(Math.random() * 10) + 1;\nconsole.log('رقم عشوائي:', randomNum);\n\n// دالة لتوليد رقم عشوائي في نطاق محدد\nfunction getRandomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log('رقم بين 5 و 15:', getRandomBetween(5, 15));",
      "explanation": "يوفر دوال رياضية أساسية للحسابات، الأرقام العشوائية، والعمليات الرياضية المعقدة."
    },
    {
      "name": "Date",
      "type": "Built-in Object",
      "description": "كائن للتعامل مع التواريخ والأوقات.",
      "syntax": "new Date()",
      "example": "// التاريخ والوقت الحالي\nconst now = new Date();\nconsole.log('الآن:', now);\n\n// إنشاء تاريخ محدد\nconst specificDate = new Date('2024-12-25');\nconst anotherDate = new Date(2024, 11, 25); // الشهر يبدأ من 0\nconsole.log('عيد الميلاد:', specificDate);\n\n// الحصول على أجزاء التاريخ\nconst year = now.getFullYear();\nconst month = now.getMonth() + 1; // إضافة 1 لأن الشهر يبدأ من 0\nconst day = now.getDate();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst seconds = now.getSeconds();\n\nconsole.log(`التاريخ: ${day}/${month}/${year}`);\nconsole.log(`الوقت: ${hours}:${minutes}:${seconds}`);\n\n// تنسيق التاريخ\nconst arabicDate = now.toLocaleDateString('ar-SA');\nconst arabicTime = now.toLocaleTimeString('ar-SA');\nconsole.log('التاريخ بالعربية:', arabicDate);\nconsole.log('الوقت بالعربية:', arabicTime);\n\n// حساب الفرق بين تاريخين\nconst birthday = new Date('1990-05-15');\nconst ageInMilliseconds = now - birthday;\nconst ageInYears = Math.floor(ageInMilliseconds / (1000 * 60 * 60 * 24 * 365));\nconsole.log('العمر:', ageInYears, 'سنة');\n\n// إضافة أيام لتاريخ\nconst futureDate = new Date();\nfutureDate.setDate(futureDate.getDate() + 7);\nconsole.log('بعد أسبوع:', futureDate.toLocaleDateString('ar-SA'));",
      "explanation": "أساسي للتعامل مع التواريخ، حساب الأعمار، جدولة المهام، وعرض التواريخ بتنسيقات مختلفة."
    },
    {
      "name": "String Methods",
      "type": "Built-in Methods",
      "description": "دوال للتعامل مع النصوص وتعديلها.",
      "syntax": "string.methodName()",
      "example": "const text = \"  مرحباً بكم في موقعنا الإلكتروني  \";\n\n// طول النص\nconsole.log('الطول:', text.length); // 32\n\n// إزالة المسافات من البداية والنهاية\nconst trimmed = text.trim();\nconsole.log('بعد التنظيف:', trimmed);\n\n// تحويل الحالة\nconst upper = text.toUpperCase();\nconst lower = text.toLowerCase();\nconsole.log('أحرف كبيرة:', upper);\nconsole.log('أحرف صغيرة:', lower);\n\n// البحث في النص\nconst searchWord = \"موقع\";\nconst index = text.indexOf(searchWord);\nconst includes = text.includes(searchWord);\nconsole.log('موضع كلمة \"موقع\":', index);\nconsole.log('يحتوي على \"موقع\":', includes);\n\n// استخراج جزء من النص\nconst substring = text.substring(10, 20);\nconst slice = text.slice(10, 20);\nconsole.log('جزء من النص:', substring);\n\n// تقسيم النص\nconst words = trimmed.split(' ');\nconsole.log('الكلمات:', words);\n\n// استبدال النص\nconst replaced = text.replace('موقعنا', 'متجرنا');\nconsole.log('بعد الاستبدال:', replaced);\n\n// تكرار النص\nconst repeated = \"★\".repeat(5);\nconsole.log('نجوم:', repeated); // \"★★★★★\"\n\n// التحقق من بداية أو نهاية النص\nconst startsWithMarhaba = trimmed.startsWith('مرحباً');\nconst endsWithElectronic = trimmed.endsWith('الإلكتروني');\nconsole.log('يبدأ بـ \"مرحباً\":', startsWithMarhaba);\nconsole.log('ينتهي بـ \"الإلكتروني\":', endsWithElectronic);",
      "explanation": "ضرورية للتعامل مع النصوص، التحقق من صحة البيانات، تنسيق المحتوى، والبحث."
    },
    {
      "name": "Array Methods",
      "type": "Built-in Methods",
      "description": "دوال للتعامل مع المصفوفات وتعديلها.",
      "syntax": "array.methodName()",
      "example": "const numbers = [1, 2, 3, 4, 5];\nconst fruits = ['تفاح', 'برتقال', 'موز', 'عنب'];\n\n// إضافة وحذف عناصر\nfruits.push('فراولة'); // إضافة في النهاية\nfruits.unshift('مانجو'); // إضافة في البداية\nconst lastFruit = fruits.pop(); // حذف من النهاية\nconst firstFruit = fruits.shift(); // حذف من البداية\n\n// البحث\nconst appleIndex = fruits.indexOf('تفاح');\nconst hasOrange = fruits.includes('برتقال');\nconsole.log('موضع التفاح:', appleIndex);\nconsole.log('يحتوي على برتقال:', hasOrange);\n\n// التكرار والتحويل\nconst doubled = numbers.map(num => num * 2);\nconsole.log('الأرقام مضاعفة:', doubled); // [2, 4, 6, 8, 10]\n\n// التصفية\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\nconsole.log('الأرقام الزوجية:', evenNumbers); // [2, 4]\n\n// البحث عن عنصر\nconst found = numbers.find(num => num > 3);\nconsole.log('أول رقم أكبر من 3:', found); // 4\n\n// التحقق من شرط\nconst allPositive = numbers.every(num => num > 0);\nconst hasEven = numbers.some(num => num % 2 === 0);\nconsole.log('جميع الأرقام موجبة:', allPositive); // true\nconsole.log('يحتوي على رقم زوجي:', hasEven); // true\n\n// تجميع القيم\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log('مجموع الأرقام:', sum); // 15\n\n// ترتيب المصفوفة\nconst sortedFruits = fruits.sort();\nconst sortedNumbers = numbers.sort((a, b) => b - a); // ترتيب تنازلي\nconsole.log('الفواكه مرتبة:', sortedFruits);\nconsole.log('الأرقام مرتبة تنازلياً:', sortedNumbers);\n\n// دمج مصفوفات\nconst moreFruits = ['كيوي', 'أناناس'];\nconst allFruits = fruits.concat(moreFruits);\n// أو باستخدام spread operator\nconst allFruitsSpread = [...fruits, ...moreFruits];\nconsole.log('جميع الفواكه:', allFruits);",
      "explanation": "أساسية للتعامل مع قوائم البيانات، تصفيتها، ترتيبها، وتحويلها."
    },

        {
          "name": "class",
          "type": "Object-Oriented Programming",
          "description": "ينشئ فئة (قالب كائنات) بخصائص وطرق.",
          "syntax": "class ClassName { constructor() {...} method() {...} }",
          "example": "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  greet() {\n    return `مرحباً، أنا ${this.name} وعمري ${this.age}`;\n  }\n}\n\nconst ahmed = new Person(\"أحمد\", 30);\nconsole.log(ahmed.greet()); // \"مرحباً، أنا أحمد وعمري 30\"\n\n// الوراثة\nclass Student extends Person {\n  constructor(name, age, major) {\n    super(name, age);\n    this.major = major;\n  }\n  \n  study() {\n    return `أدرس ${this.major}`;\n  }\n}\n\nconst student = new Student(\"فاطمة\", 22, \"هندسة الحاسوب\");\nconsole.log(student.greet() + \" و\" + student.study());",
          "explanation": "طريقة حديثة للبرمجة الكائنية التوجه في JavaScript."
        },
        {
          "name": "Promise",
          "type": "Asynchronous Programming",
          "description": "يمثل عملية غير متزامنة قد تكتمل في المستقبل.",
          "syntax": "new Promise((resolve, reject) => {...})",
          "example": "function fetchData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url === 'https://api.example.com') {\n        resolve({ data: 'بيانات ناجحة' });\n      } else {\n        reject('خطأ في الرابط');\n      }\n    }, 2000);\n  });\n}\n\n// استخدام Promise\nfetchData('https://api.example.com')\n  .then(response => {\n    console.log('البيانات:', response.data);\n  })\n  .catch(error => {\n    console.error('حدث خطأ:', error);\n  });\n\n// استخدام async/await\nasync function getData() {\n  try {\n    const response = await fetchData('https://api.example.com');\n    console.log('النتيجة:', response.data);\n  } catch (error) {\n    console.error('فشل:', error);\n  }\n}",
          "explanation": "أساس للتعامل مع العمليات غير المتزامنة مثل طلبات الشبكة."
        },
        {
          "name": "async/await",
          "type": "Asynchronous Programming",
          "description": "بناء لغوي للتعامل مع العمليات غير المتزامنة بشكل متزامن.",
          "syntax": "async function() { await promise; }",
          "example": "async function getUserData(userId) {\n  try {\n    const response = await fetch(`https://api.example.com/users/${userId}`);\n    const user = await response.json();\n    \n    const postsResponse = await fetch(`https://api.example.com/posts?userId=${userId}`);\n    const posts = await postsResponse.json();\n    \n    return { user, posts };\n  } catch (error) {\n    console.error('فشل في جلب البيانات:', error);\n    throw error;\n  }\n}\n\n// استخدام الدالة\n(async () => {\n  try {\n    const data = await getUserData(123);\n    console.log('بيانات المستخدم:', data.user);\n    console.log('منشوراته:', data.posts);\n  } catch (error) {\n    console.error('حدث خطأ:', error);\n  }\n})();",
          "explanation": "طريقة أكثر وضوحاً للتعامل مع Promises."
        },
        {
          "name": "Map",
          "type": "Data Structure",
          "description": "مجموعة من أزواج المفتاح-القيمة مع الحفاظ على ترتيب الإدراج.",
          "syntax": "new Map()",
          "example": "const userMap = new Map();\n\n// إضافة بيانات\nuserMap.set('user1', { name: 'أحمد', age: 30 });\nuserMap.set('user2', { name: 'فاطمة', age: 25 });\n\n// الحصول على بيانات\nconsole.log(userMap.get('user1')); // {name: 'أحمد', age: 30}\n\n// التحقق من وجود مفتاح\nconsole.log(userMap.has('user2')); // true\n\n// الحجم\nconsole.log('عدد المستخدمين:', userMap.size); // 2\n\n// التكرار\nuserMap.forEach((value, key) => {\n  console.log(`${key}: ${value.name}`);\n});\n\n// تحويل إلى مصفوفة\nconsole.log([...userMap]);",
          "explanation": "بديل لكائنات JavaScript التقليدية مع مميزات إضافية."
        },
        {
          "name": "Set",
          "type": "Data Structure",
          "description": "مجموعة من القيم الفريدة بأي نوع.",
          "syntax": "new Set()",
          "example": "const uniqueNumbers = new Set();\n\n// إضافة قيم\nuniqueNumbers.add(1);\nuniqueNumbers.add(2);\nuniqueNumbers.add(1); // لن تتم إضافته\n\nconsole.log(uniqueNumbers); // Set(2) {1, 2}\nconsole.log(uniqueNumbers.has(2)); // true\n\n// إزالة قيمة\nuniqueNumbers.delete(1);\n\n// استخدام مع مصفوفات لإزالة التكرارات\nconst numbers = [1, 2, 2, 3, 4, 4, 5];\nconst unique = [...new Set(numbers)];\nconsole.log(unique); // [1, 2, 3, 4, 5]",
          "explanation": "مثالي لتخزين قيم فريدة وإزالة التكرارات."
        },
        {
          "name": "Destructuring",
          "type": "Syntax Feature",
          "description": "استخراج القيم من المصفوفات والكائنات إلى متغيرات.",
          "syntax": "const {prop} = object; const [item] = array;",
          "example": "// تفكيك الكائنات\nconst user = { \n  name: 'سارة', \n  age: 28, \n  address: { city: 'الرياض' } \n};\n\nconst { name, age, address: { city } } = user;\nconsole.log(name, age, city); // 'سارة' 28 'الرياض'\n\n// تفكيك المصفوفات\nconst colors = ['أحمر', 'أخضر', 'أزرق'];\nconst [firstColor, , thirdColor] = colors;\nconsole.log(firstColor, thirdColor); // 'أحمر' 'أزرق'\n\n// استخدام في معاملات الدوال\nfunction printUser({name, age}) {\n  console.log(`الاسم: ${name}, العمر: ${age}`);\n}\n\nprintUser(user); // 'الاسم: سارة, العمر: 28'\n\n// تبديل القيم\nlet a = 1, b = 2;\n[a, b] = [b, a];\nconsole.log(a, b); // 2 1",
          "explanation": "يزيد من قابلية القراءة ويقلل كود التهيئة."
        },
        {
          "name": "Spread Operator",
          "type": "Syntax Feature",
          "description": "يفرد عناصر المصفوفات أو خصائص الكائنات.",
          "syntax": "...iterable",
          "example": "// مع المصفوفات\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n\n// مع الكائنات\nconst defaults = { theme: 'light', fontSize: 16 };\nconst userSettings = { fontSize: 18, darkMode: true };\nconst finalSettings = { ...defaults, ...userSettings };\nconsole.log(finalSettings); // {theme: 'light', fontSize: 18, darkMode: true}\n\n// في استدعاء الدوال\nconst numbers = [5, 3, 8, 1];\nconsole.log(Math.max(...numbers)); // 8\n\n// نسخ المصفوفات\nconst original = [1, 2, 3];\nconst copy = [...original];",
          "explanation": "مفيد لدمج المجموعات ونسخها ونقل البيانات."
        },
        {
          "name": "Rest Parameters",
          "type": "Syntax Feature",
          "description": "يمثل عدد غير محدود من المعاملات كمصفوفة.",
          "syntax": "function(...args)",
          "example": "// جمع الأرقام\nfunction sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3)); // 6\nconsole.log(sum(5, 10, 15, 20)); // 50\n\n// مع معاملات أخرى\nfunction join(separator, ...strings) {\n  return strings.join(separator);\n}\n\nconsole.log(join('-', 'أحمد', 'محمد', 'علي')); // 'أحمد-محمد-علي'\n\n// في تفكيك المصفوفات\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(first); // 1\nconsole.log(rest); // [2, 3, 4, 5]",
          "explanation": "يوفر مرونة في التعامل مع الدوال ذات المعاملات المتغيرة."
        },
        {
          "name": "Arrow Functions",
          "type": "Function Expression",
          "description": "صيغة مختصرة للدوال مع ربط ديناميكي لـ this.",
          "syntax": "const func = () => {...}",
          "example": "// دوال بسيطة\nconst add = (a, b) => a + b;\nconsole.log(add(5, 3)); // 8\n\n// مع كتلة كود\nconst greet = name => {\n  const message = `مرحباً ${name}`;\n  return message;\n};\n\n// مع المصفوفات\nconst numbers = [1, 2, 3, 4];\nconst squares = numbers.map(n => n * n);\nconsole.log(squares); // [1, 4, 9, 16]\n\n// سلوك this\nconst person = {\n  name: 'عمر',\n  tasks: ['عمل', 'دراسة', 'تمارين'],\n  showTasks() {\n    this.tasks.forEach(task => {\n      console.log(`${this.name} يجب أن يقوم بـ: ${task}`);\n    });\n  }\n};\n\nperson.showTasks();",
          "explanation": "صيغة موجزة تحافظ على سياق this من السياق المحيط."
        },
        {
          "name": "Template Literals",
          "type": "String Feature",
          "description": "سلاسل نصية مع إمكانية تضمين تعبيرات وأسطر متعددة.",
          "syntax": "`string ${expression} string`",
          "example": "const name = 'ليلى';\nconst age = 29;\n\n// سلسلة عادية\nconst message = `اسمي ${name} وعمري ${age}`;\nconsole.log(message); // 'اسمي ليلى وعمري 29'\n\n// أسطر متعددة\nconst multiLine = `\n  <div>\n    <h1>${name}</h1>\n    <p>العمر: ${age} سنة</p>\n  </div>\n`;\n\n// تعبيرات\nconst price = 19.99;\nconst tax = 0.15;\nconsole.log(`السعر الإجمالي: ${price * (1 + tax)} ريال`);\n\n// استدعاء دوال\nfunction formatCurrency(amount) {\n  return amount.toFixed(2);\n}\n\nconsole.log(`الرصيد: ${formatCurrency(1250.5)} ريال`);",
          "explanation": "تحسين كبير لبناء السلاسل النصية المعقدة."
        },
        {
          "name": "try/catch",
          "type": "Error Handling",
          "description": "يعالج الأخطاء أثناء التنفيذ دون إيقاف البرنامج.",
          "syntax": "try {...} catch(error) {...}",
          "example": "async function loadData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error('فشل في جلب البيانات');\n    }\n    const data = await response.json();\n    console.log('البيانات:', data);\n  } catch (error) {\n    console.error('حدث خطأ:', error.message);\n    // إظهار رسالة للمستخدم\n    alert('تعذر تحميل البيانات. الرجاء المحاولة لاحقاً.');\n  } finally {\n    console.log('تم الانتهاء من المحاولة');\n    // إخفاء مؤشر التحميل\n  }\n}\n\n// مع أخطاء مخصصة\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nfunction validateInput(input) {\n  if (!input) {\n    throw new ValidationError('المدخل مطلوب');\n  }\n}",
          "explanation": "آلية أساسية للتعامل مع الأخطاء بشكل أنيق."
        },
        {
          "name": "Regular Expressions",
          "type": "Pattern Matching",
          "description": "أنماط للبحث عن وتعديل النصوص.",
          "syntax": "/pattern/flags",
          "example": "// التحقق من صيغة البريد الإلكتروني\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nconsole.log(emailRegex.test('user@example.com')); // true\nconsole.log(emailRegex.test('invalid-email')); // false\n\n// البحث في نص\nconst text = 'رقم الهاتف: 0501234567، ورقم آخر: 0559876543';\nconst phoneRegex = /05\\d{8}/g;\n\n// استخراج الأرقام\nconst phones = text.match(phoneRegex);\nconsole.log(phones); // ['0501234567', '0559876543']\n\n// استبدال\nconst maskedText = text.replace(phoneRegex, '05X-XXXXXXX');\nconsole.log(maskedText); // 'رقم الهاتف: 05X-XXXXXXX، ورقم آخر: 05X-XXXXXXX'\n\n// تقسيم نص\nconst csv = 'أحمد,30,الرياض;فاطمة,25,جدة';\nconst rows = csv.split(/[;,]/);\nconsole.log(rows); // ['أحمد', '30', 'الرياض', 'فاطمة', '25', 'جدة']",
          "explanation": "أداة قوية لمعالجة النصوص والتحقق من الصيغ."
        },
        {
          "name": "Proxy",
          "type": "Meta Programming",
          "description": "يخلق كائن وكيل للتحكم في سلوك كائن آخر.",
          "syntax": "new Proxy(target, handler)",
          "example": "const person = { name: 'نور', age: 25 };\n\nconst personProxy = new Proxy(person, {\n  get(target, property) {\n    console.log(`قراءة ${property}`);\n    return target[property];\n  },\n  set(target, property, value) {\n    if (property === 'age' && typeof value !== 'number') {\n      throw new Error('العمر يجب أن يكون رقماً');\n    }\n    console.log(`تحديث ${property} إلى ${value}`);\n    target[property] = value;\n    return true;\n  },\n  deleteProperty(target, property) {\n    console.log(`حذف ${property}`);\n    delete target[property];\n    return true;\n  }\n});\n\nconsole.log(personProxy.name); // 'نور' + سجل 'قراءة name'\npersonProxy.age = 26; // سجل 'تحديث age إلى 26'\npersonProxy.email = 'noor@example.com'; // سجل 'تحديث email...'\ndelete personProxy.email; // سجل 'حذف email'",
          "explanation": "يسمح بإنشاء كائنات ذكية مع التحقق من الصحة والتسجيل."
        },
        {
          "name": "Reflect",
          "type": "Meta Programming",
          "description": "يوفر طرقًا للتعامل مع الكائنات بشكل برمجي.",
          "syntax": "Reflect.method(target, ...args)",
          "example": "const user = { name: 'عمر' };\n\n// بديل لـ Object.getOwnPropertyDescriptor\nconst desc = Reflect.getOwnPropertyDescriptor(user, 'name');\n\n// إضافة خاصية\nReflect.set(user, 'age', 30);\n\n// التحقق من وجود خاصية\nif (Reflect.has(user, 'name')) {\n  console.log('الاسم موجود');\n}\n\n// حذف خاصية\nReflect.deleteProperty(user, 'age');\n\n// مع Proxy\nconst proxy = new Proxy(user, {\n  get(target, prop) {\n    return Reflect.get(target, prop);\n  }\n});",
          "explanation": "مكمل لـ Proxy مع طرق قياسية للعمليات الكائنية."
        },
        {
          "name": "Modules (import/export)",
          "type": "Code Organization",
          "description": "يسمح بتقسيم الكود إلى ملفات وإعادة استخدامها.",
          "syntax": "export... import...",
          "example": "// math.js\nconst PI = 3.14159;\n\nexport function circleArea(radius) {\n  return PI * radius * radius;\n}\n\nexport default function add(a, b) {\n  return a + b;\n}\n\n// app.js\nimport add, { circleArea } from './math.js';\n\nconsole.log(add(5, 3)); // 8\nconsole.log(circleArea(5)); // 78.53975\n\n// استيراد بأسماء مختلفة\nimport { circleArea as area } from './math.js';\n\n// استيراد الكل\nimport * as mathUtils from './math.js';\nconsole.log(mathUtils.circleArea(10));",
          "explanation": "طريقة حديثة لتنظيم الكود في مشاريع JavaScript."
        },
        {
          "name": "Web Components",
          "type": "Component Model",
          "description": "إنشاء عناصر HTML مخصصة قابلة لإعادة الاستخدام.",
          "syntax": "class CustomElement extends HTMLElement {...}",
          "example": "class UserCard extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    const name = this.getAttribute('name') || 'مستخدم';\n    const avatar = this.getAttribute('avatar') || 'default.jpg';\n    \n    this.shadowRoot.innerHTML = `\n      <style>\n        .card {\n          border: 1px solid #ccc;\n          padding: 20px;\n          border-radius: 8px;\n          display: flex;\n          align-items: center;\n        }\n        img { \n          width: 80px; \n          height: 80px;\n          border-radius: 50%;\n          margin-left: 15px;\n        }\n      </style>\n      <div class=\"card\">\n        <div>\n          <h3>${name}</h3>\n          <slot name=\"email\"></slot>\n        </div>\n        <img src=\"${avatar}\" alt=\"${name}\" />\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('user-card', UserCard);\n\n// في HTML\n// <user-card name=\"أحمد\" avatar=\"ahmed.jpg\">\n//   <span slot=\"email\">ahmed@example.com</span>\n// </user-card>",
          "explanation": "معيار ويب لإنشاء مكونات واجهة قابلة لإعادة الاستخدام."
        },
        {
          "name": "Generators",
          "type": "Control Flow",
          "description": "دوال يمكن إيقافها واستئنافها لإنشاء تدفقات قيم.",
          "syntax": "function* gen() { yield value; }",
          "example": "function* idGenerator() {\n  let id = 1;\n  while (true) {\n    yield id++;\n  }\n}\n\nconst gen = idGenerator();\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n\n// توليد متتالية فيبوناتشي\nfunction* fibonacci() {\n  let [a, b] = [0, 1];\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nconst fib = fibonacci();\nfor (let i = 0; i < 10; i++) {\n  console.log(fib.next().value); // 0, 1, 1, 2, 3, 5, 8...\n}\n\n// إدارة الحالة\nfunction* trafficLight() {\n  while (true) {\n    yield 'أحمر';\n    yield 'أصفر';\n    yield 'أخضر';\n    yield 'أصفر';\n  }\n}\n\nconst light = trafficLight();\nconsole.log(light.next().value); // 'أحمر'\nconsole.log(light.next().value); // 'أصفر'",
          "explanation": "تتيح إنشاء مكررات معقدة وإدارة الحالة بشكل فريد."
        },
        {
          "name": "Intersection Observer",
          "type": "Web API",
          "description": "يكشف عندما يتم ظهور عنصر في نافذة العرض.",
          "syntax": "new IntersectionObserver(callback, options)",
          "example": "const observer = new IntersectionObserver((entries) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      console.log('العنصر ظهر:', entry.target);\n      // تحميل الصور عند الظهور\n      const img = entry.target;\n      img.src = img.dataset.src;\n      observer.unobserve(img);\n    }\n  });\n}, { threshold: 0.5 });\n\n// مراقبة جميع الصور الكسولة\ndocument.querySelectorAll('img.lazy').forEach(img => {\n  observer.observe(img);\n});\n\n// التحميل اللانهائي\nconst sentinel = document.querySelector('#sentinel');\nconst infiniteObserver = new IntersectionObserver(([entry]) => {\n  if (entry.isIntersecting) {\n    loadMoreItems();\n  }\n});\n\ninfiniteObserver.observe(sentinel);",
          "explanation": "مهم لتأجيل التحميل، التحليلات، والتجارب التفاعلية."
        },
        {
          "name": "Web Workers",
          "type": "Concurrency API",
          "description": "تشغيل سكربتات في خلفية منفصلة.",
          "syntax": "new Worker('worker.js')",
          "example": "// main.js\nconst worker = new Worker('worker.js');\n\nworker.postMessage({ type: 'CALCULATE', data: 1000000 });\n\nworker.onmessage = function(event) {\n  console.log('النتيجة:', event.data.result);\n};\n\nworker.onerror = function(error) {\n  console.error('خطأ في العامل:', error);\n};\n\n// worker.js\nself.onmessage = function(event) {\n  if (event.data.type === 'CALCULATE') {\n    const result = heavyCalculation(event.data.data);\n    self.postMessage({ result });\n  }\n};\n\nfunction heavyCalculation(n) {\n  // عمليات حسابية ثقيلة\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += Math.sqrt(i);\n  }\n  return sum;\n}",
          "explanation": "يمنع تجميد واجهة المستخدم للمهام الثقيلة."
        },
        {
          "name": "Service Workers",
          "type": "Progressive Web Apps",
          "description": "وكلاء للتحكم في الشبكة والتخزين المؤقت.",
          "syntax": "navigator.serviceWorker.register('sw.js')",
          "example": "// التسجيل\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js')\n    .then(reg => console.log('Service Worker مسجل'))\n    .catch(err => console.error('فشل التسجيل:', err));\n}\n\n// sw.js\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open('v1').then(cache => {\n      return cache.addAll([\n        '/',\n        '/index.html',\n        '/styles.css',\n        '/app.js'\n      ]);\n    })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => response || fetch(event.request))\n  );\n});",
          "explanation": "أساس لتطبيقات الويب التقدمية (PWA) والعمل دون اتصال."
        }
      
    
  ]
}

